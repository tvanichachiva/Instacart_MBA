top_n(10) %>%
left_join(products, by = "product_id") %>%
select(product_name, number_of_orders) %>%
arrange(desc(number_of_orders))
top10_products_train <- products_train %>%
group_by(product_id) %>%
summarise(number_of_orders = n()) %>%
top_n(10) %>%
left_join(products, by = "product_id") %>%
select(product_name, number_of_orders) %>%
arrange(desc(number_of_orders))
#Top 10 most ordered items - Plotting
prod_bar_plot <- function(ds) {
ds %>%
ggplot(aes(reorder(product_name, number_of_orders), number_of_orders, fill = product_name)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(x = "Product Name", y = "Count") +
theme_minimal()  +
theme(legend.position = "none")
}
prod_prior_plt <- prod_bar_plot(top10_products_prior)
prod_train_plt <- prod_bar_plot(top10_products_train)
plot_grid(prod_prior_plt + labs(title = "Top 10 Items in the Prior Dataset")
,prod_train_plt + labs(title =  "Top 10 Items in the Train Dataset"))
View(products_prior)
#Average Instacart basket size - Train/Prior
products_prior %>%
group_by(order_id) %>%
summarise(basket_size = sum(add_to_cart_order))
#Average Instacart basket size - Train/Prior
products_prior %>%
group_by(order_id) %>%
summarise(basket_size = sum(add_to_cart_order)) %>%
mean()
#Average Instacart basket size - Train/Prior
products_prior %>%
group_by(order_id) %>%
summarise(basket_size = sum(add_to_cart_order)) %>%
mean(basket_size)
#Average Instacart basket size - Train/Prior
products_prior %>%
group_by(order_id) %>%
summarise(basket_size = sum(add_to_cart_order)) %>%
select(basket_size) %>%
mean()
#Average Instacart basket size - Train/Prior
products_prior %>%
group_by(order_id) %>%
summarise(basket_size = sum(add_to_cart_order)) %>%
ggplot(aes(basket_size)) +
geom_histogram()
#Average Instacart basket size - Train/Prior
products_prior %>%
group_by(order_id) %>%
summarise(basket_size = sum(add_to_cart_order)) %>%
ggplot(aes(basket_size)) +
geom_histogram(stat = "count")
#Average Instacart basket size - Train/Prior
products_prior %>%
group_by(order_id) %>%
summarise(basket_size = last(add_to_cart_order)) %>%
ggplot(aes(basket_size)) +
geom_histogram(stat = "count")
#Average Instacart basket size - Train/Prior
products_prior %>%
group_by(order_id) %>%
summarise(basket_size = last(add_to_cart_order)) %>%
ggplot(aes(basket_size)) +
geom_histogram(stat = "count", fill = "light blue") +
theme_minimal()
basket_size_prior <- products_prior %>%
group_by(order_id) %>%
summarise(basket_size = last(add_to_cart_order)) %>%
ggplot(aes(basket_size)) +
geom_histogram(stat = "count", fill = "light blue") +
coord_cartesian(xlim = c(0, 100))
theme_minimal()
basket_size_train <- products_train %>%
group_by(order_id) %>%
summarise(basket_size = last(add_to_cart_order)) %>%
ggplot(aes(basket_size)) +
geom_histogram(stat = "count", fill = "light green") +
coord_cartesian(xlim = c(0, 100))
theme_minimal()
plot_grid(basket_size_prior + labs(title = "Basket Size Distribution - Prior")
,basket_size_train + labs(title = "Basket Size Distribution - Train"))
#Average Instacart basket size - Train/Prior
basket_size_prior <- products_prior %>%
group_by(order_id) %>%
summarise(basket_size = last(add_to_cart_order)) %>%
ggplot(aes(basket_size)) +
geom_histogram(stat = "count", fill = "light blue") +
coord_cartesian(xlim = c(0, 60)) +
theme_minimal()
basket_size_train <- products_train %>%
group_by(order_id) %>%
summarise(basket_size = last(add_to_cart_order)) %>%
ggplot(aes(basket_size)) +
geom_histogram(stat = "count", fill = "light green") +
coord_cartesian(xlim = c(0, 60)) +
theme_minimal()
plot_grid(basket_size_prior + labs(title = "Basket Size Distribution - Prior")
,basket_size_train + labs(title = "Basket Size Distribution - Train"))
basket_size_prior <- products_prior %>%
group_by(order_id) %>%
summarise(basket_size = last(add_to_cart_order)) %>%
ggplot(aes(basket_size)) +
geom_histogram(stat = "count", fill = "light blue") +
scale_x_continuous(breaks = seq(from = 0, to = 60, by = 5)) +
theme_minimal()
basket_size_train <- products_train %>%
group_by(order_id) %>%
summarise(basket_size = last(add_to_cart_order)) %>%
ggplot(aes(basket_size)) +
geom_histogram(stat = "count", fill = "light green") +
scale_x_continuous(breaks = seq(from = 0, to = 60, by = 5)) +
theme_minimal()
plot_grid(basket_size_prior + labs(title = "Basket Size Distribution - Prior")
,basket_size_train + labs(title = "Basket Size Distribution - Train"))
plot_grid(basket_size_prior + labs(title = "Basket Size Distribution - Prior")
,basket_size_train + labs(title = "Basket Size Distribution - Train"))
plot_grid(basket_size_prior + labs(title = "Basket Size Distribution - Prior")
,basket_size_train + labs(title = "Basket Size Distribution - Train")
,ncol = 1)
basket_size_prior
basket_size_prior <- products_prior %>%
group_by(order_id) %>%
summarise(basket_size = last(add_to_cart_order)) %>%
ggplot(aes(basket_size)) +
geom_histogram(stat = "count", fill = "light blue") +
xlim(0,60) +
scale_x_continuous(breaks = seq(from = 0, to = 60, by = 5)) +
theme_minimal()
basket_size_prior <- products_prior %>%
group_by(order_id) %>%
summarise(basket_size = last(add_to_cart_order)) %>%
ggplot(aes(basket_size)) +
geom_histogram(stat = "count", fill = "light blue", binwidth = 5) +
#xlim(0,60) +
scale_x_continuous(breaks = seq(from = 0, to = 60, by = 5)) +
theme_minimal()
basket_size_prior
basket_size_prior <- products_prior %>%
group_by(order_id) %>%
summarise(basket_size = last(add_to_cart_order)) %>%
ggplot(aes(basket_size)) +
geom_histogram(stat = "count", fill = "light blue", binwidth = 5) +
xlim(0,60) +
#scale_x_continuous(breaks = seq(from = 0, to = 60, by = 5)) +
theme_minimal()
basket_size_prior
#Average Instacart basket size - Train/Prior
basket_size_prior <- products_prior %>%
group_by(order_id) %>%
summarise(basket_size = last(add_to_cart_order)) #%>%
basket_size_prior %>% ggplot(aes(basket_size)) +
geom_histogram(stat = "count", fill = "light blue", binwidth = 5) +
##xlim(0,60) +
scale_x_continuous(breaks = seq(from = 0, to = 60, by = 5)) +
theme_minimal()
basket_size_prior %>% ggplot(aes(basket_size)) +
geom_histogram(stat = "count", fill = "light blue", binwidth = 5) +
##xlim(0,60) +
scale_x_continuous(breaks = seq(from = 0, to = 60, by = 5)) +
coord_cartesian(xlim = c(0,ncol(60)+0.5)) +
theme_minimal()
basket_size_prior %>% ggplot(aes(basket_size)) +
geom_histogram(stat = "count", fill = "light blue", binwidth = 5) +
##xlim(0,60) +
scale_x_discrete(breaks = seq(from = 0, to = 60, by = 5)) +
theme_minimal()
basket_size_prior %>% ggplot(aes(basket_size)) +
geom_histogram(stat = "count", fill = "light blue", binwidth = 5) +
##xlim(0,60) +
scale_x_binned(breaks = seq(from = 0, to = 60, by = 5)) +
theme_minimal()
#Average Instacart basket size - Train/Prior
basket_size_prior <- products_prior %>%
group_by(order_id) %>%
summarise(basket_size = last(add_to_cart_order)) %>%
ggplot(aes(basket_size)) +
geom_histogram(stat = "count", fill = "light blue", binwidth = 5) +
xlim(0,60) +
#scale_x_continuous(breaks = seq(from = 0, to = 60, by = 5)) +
theme_minimal()
basket_size_train <- products_train %>%
group_by(order_id) %>%
summarise(basket_size = last(add_to_cart_order)) %>%
ggplot(aes(basket_size)) +
geom_histogram(stat = "count", fill = "light green") +
xlim(0,60) +
#scale_x_continuous(breaks = seq(from = 0, to = 60, by = 5)) +
theme_minimal()
plot_grid(basket_size_prior + labs(title = "Basket Size Distribution - Prior")
,basket_size_train + labs(title = "Basket Size Distribution - Train")
,ncol = 1)
#Load in libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(arules)
library(cowplot)
library(scales)
library(arules)
#Reading in data
aisle <- read.csv("data/aisles.csv")
department <- read.csv("data/departments.csv")
products_prior <- read.csv("data/order_products__prior.csv")
products_train <- read.csv("data/order_products__train.csv")
orders <- read.csv("data/orders.csv")
products <- read.csv("data/products.csv")
View(products_prior)
32434489 + 1384617
#Put data into a basket format
#All products in an order will be in one record
orders_products <- orders %>%
left_join(products_prior, by = "order_id") %>%  select(order_id, product_name) %>% head()
orders %>%
left_join(products_prior, by = "order_id") %>%  select(order_id) %>% head()
orders %>%
left_join(products_prior, by = "order_id") %>%  head()
orders %>%
inner_join(products_prior, by = "order_id") %>%  head()
#Put data into a basket format
#All products in an order will be in one record
orders_products <-
orders %>%
inner_join(products_prior, by = "order_id") %>%
left_join(products, by = "product_id") %>%  head()
orders %>%
inner_join(products_prior, by = "order_id") %>%
left_join(products, by = "product_id") %>%  select(order_id, product_name)
orders_products <- orders %>%
inner_join(products_prior, by = "order_id") %>%
inner_join(products_train, by = "order_id")
left_join(products, by = "product_id") %>%  select(order_id, product_name)
trans <- as(split(orders_products[,"product_name"], orders_products[,"order_id"]), "transactions")
orders_products <- orders %>%
inner_join(products_prior, by = "order_id") %>%
inner_join(products_train, by = "order_id") %>%
left_join(products, by = "product_id") %>%  select(order_id, product_name)
trans <- as(split(orders_products[,"product_name"], orders_products[,"order_id"]), "transactions")
orders %>%
inner_join(products_prior, by = "order_id") %>%
inner_join(products_train, by = "order_id") %>%
left_join(products, by = "product_id"
orders %>%
inner_join(products_prior, by = "order_id") %>%
inner_join(products_train, by = "order_id") %>%
left_join(products, by = "product_id") %>%
select(order_id, product_name)
tmp <- orders %>%
inner_join(products_prior, by = "order_id") %>%
inner_join(products_train, by = "order_id")
tmp %>%
left_join(products, by = "product_id") %>%
select(order_id, product_name)
tmp <- orders %>%
inner_join(products_prior, by = "order_id") %>%
inner_join(products_train, by = "order_id")
View(tmp)
tmp <- orders %>%
inner_join(products_prior, by = "order_id")
tmp <- orders %>%
left_join(products_prior, by = "order_id") %>%
left_join(products_train, by = "order_id")
tmp %>%
left_join(products, by = "product_id") %>%
select(order_id, product_name)
View(tmp)
tmp %>% distinct(product_id.y)
train_basket <- products_train %>%
left_join(products, by = "product_id") %>%
select(order_id, product_name)
View(train_basket)
baskets <- as(split(orders_products[,"product_name"], orders_products[,"order_id"]), "transactions")
baskets <- as(split(train_basket[,"product_name"], train_basket[,"order_id"]), "transactions")
#Put data into a basket format
#All products in an order will be in one record
train_basket <- products_train %>%
left_join(products, by = "product_id") %>%
select(order_id, product_name) %>% top_n(200)
baskets <- as(split(train_basket[,"product_name"], train_basket[,"order_id"]), "transactions")
head(inspect(baskets))
View(baskets)
View(baskets)
baskets %>% filter(transactionID == "14")
train_basket <- products_train %>%
left_join(products, by = "product_id") %>%
select(order_id, product_name)
baskets <- as(split(train_basket[,"product_name"], train_basket[,"order_id"]), "transactions")
summary(baskets)
#All products in an order will be in one record
train_basket <- products_train %>% group_by(product_id) %>%
left_join(products, by = "product_id") %>%
select(order_id, product_name)
baskets <- as(split(train_basket[,"product_name"], train_basket[,"order_id"]), "transactions")
summary(baskets)
#All products in an order will be in one record
train_basket <- products_train %>%
left_join(products, by = "product_id") %>%
select(order_id, product_name)
baskets <- as(split(train_basket[,"product_name"], train_basket[,"order_id"]), "transactions")
summary(baskets)
inspect(baskets[1:3])
#Inspecting the first 5 baskets
inspect(baskets[1:5])
products_prior %>% filter(order_id == 1)
View(products_train)
products_prior %>% filter(order_id == 1) %>% select()
products_prior %>% filter(order_id == "1") %>% select()
products_prior %>% head()
products_prior %>% filter(order_id == 2) %>% select()
products_prior %>% filter(order_id == 2)
products_prior %>% filter(order_id == 1)
#Load in libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(arules)
library(cowplot)
library(scales)
library(arules)
#Reading in data
aisle <- read.csv("data/aisles.csv")
department <- read.csv("data/departments.csv")
products_prior <- read.csv("data/order_products__prior.csv")
products_train <- read.csv("data/order_products__train.csv")
orders <- read.csv("data/orders.csv")
products <- read.csv("data/products.csv")
#Inspect the data
#The eval_set field in the orders dataset tells us if the order is from either train, prior, or test
glimpse(aisle) #Category information for products
glimpse(department) #Category information for products
glimpse(products_prior) #products that were on an order
glimpse(products_train) #products that were on an order
glimpse(orders) #order level information
glimpse(products) #product level data
#Convert character variables to factors
aisles <- aisles %>%
mutate(aisle = as.factor(aisle))
department <-  department %>%
mutate(department = as.factor(department))
orders <-  orders %>%
mutate(eval_set = as.factor(eval_set)
,order_hour_of_day = as.numeric(order_hour_of_day)
,order_dow = as.factor(order_dow)
,order_hour_of_day = as.factor(order_hour_of_day))
products <- products %>%
mutate(product_name = as.factor(product_name))
#All products in an order will be in one record
train_basket <- products_train %>%
left_join(products, by = "product_id") %>%
select(order_id, product_name)
baskets <- as(split(train_basket[,"product_name"], train_basket[,"order_id"]), "transactions")
write.csv?
baskets <- as(split(train_basket[,"product_name"], train_basket[,"order_id"]), "transactions")
write.csv?
#Write basket data to a transaction file then read it in
write.csv(train_basket, file = "/data/train_basket.csv")
#Write basket data to a transaction file then read it in
write.csv(train_basket, file = "data/train_basket.csv")
train_basket <- read.transactions("train_basket.csv", format = "single", sep = ",")
train_basket <- read.transactions("train_basket.csv", format = "single", sep = ",", cols = c(1,2))
train_basket <- read.transactions("data/train_basket.csv", format = "single", sep = ",", cols = c(1,2))
baskets <- as(split(train_basket[,"product_name"], train_basket[,"order_id"]), "transactions")
View(train_basket)
View(train_basket)
baskets <- as(split(train_basket[,"product_name"], train_basket[,"order_id"]), "transactions")
summary(train_basket)
summary(baskets)
baskets <- read.transactions("data/train_basket.csv", format = "single", sep = ",", cols = c(1,2))
summary(baskets)
#Inspecting the first 5 baskets
inspect(baskets[1:5])
#Put data into a basket format
#All products in an order will be in one record
train_basket <- products_train %>%
left_join(products, by = "product_id") %>%
select(order_id, product_name) %>% head()
#All products in an order will be in one record
train_basket
baskets <- read.transactions("data/train_basket.csv", format = "single", sep = ",", cols = c(2,3))
summary(baskets)
#Inspecting the first 5 baskets
inspect(baskets[1:5])
#Establish association rules with the Apriori Algorithm
basket_rules <- apriori(baskets, parameter = list(support = "0.001", confidence = 0.25))
#Establish association rules with the Apriori Algorithm
basket_rules <- apriori(baskets, parameter = list(support = 0.001, confidence = 0.25))
summary(basket_rules)
inspect(basket_rules[1:5])
inspect(basket_rules[1:50])
inspect(basket_rules[1:5])
inspect(basket_rules[1:5])
inspect(basket_rules[1:5])
#Top Lift values
top_lift <- sort(basket_rules, decreasing = TRUE, na.last = NA, by = "lift")
inspect(head(top_lift, 5))
inspect(head(top_lift, 5))
inspect(head(top_lift, 10))
#Top Lift values
top_lift <- sort(basket_rules, decreasing = TRUE, na.last = NA, by = "count")
inspect(head(top_lift, 10))
inspect(head(top_lift, 10))
#Top Lift values
top_lift <- sort(basket_rules, decreasing = TRUE, na.last = NA, by = "support")
inspect(head(top_lift, 10))
inspect(head(top_support, 10))
#Top Lift values
top_support <- sort(basket_rules, decreasing = TRUE, na.last = NA, by = "support")
inspect(head(top_support, 10))
top_confidence <- sort(basket_rules, decreasing = TRUE, na.last = NA, by = "confidence")
inspect(head(top_confidence, 10))
p_support <- sort(basket_rules, decreasing = TRUE, na.last = NA, by = "support")
inspect(head(top_support, 10))
top_confidence <- sort(basket_rules, decreasing = TRUE, na.last = NA, by = "confidence")
inspect(head(top_co
top_support <- sort(basket_rules, decreasing = TRUE, na.last = NA, by = "support")
inspect(head(top_support, 10))
top_confidence <- sort(basket_rules, decreasing = TRUE, na.last = NA, by = "confidence")
inspect(head(top_confidence, 10))
#Establish association rules with the Apriori Algorithm
basket_rules <- apriori(baskets, parameter = list(support = 0.005, confidence = 0.25))
#Top support and confidence values
top_support <- sort(basket_rules, decreasing = TRUE, na.last = NA, by = "support")
inspect(head(top_support, 10))
top_confidence <- sort(basket_rules, decreasing = TRUE, na.last = NA, by = "confidence")
inspect(head(top_confidence, 10))
#Establish association rules with the Apriori Algorithm
basket_rules <- apriori(baskets, parameter = list(support = 0.005, confidence = 0.90))
#Top support and confidence values
#It seems like bananas (regular or organic) are bought with many transactions
top_support <- sort(basket_rules, decreasing = TRUE, na.last = NA, by = "support")
inspect(head(top_support, 10))
#Establish association rules with the Apriori Algorithm
basket_rules <- apriori(baskets, parameter = list(support = 0.005, confidence = 0.80))
#Top support and confidence values
#It seems like bananas (regular or organic) are bought with many transactions
top_support <- sort(basket_rules, decreasing = TRUE, na.last = NA, by = "support")
inspect(head(top_support, 10))
#Establish association rules with the Apriori Algorithm
basket_rules <- apriori(baskets, parameter = list(support = 0.005, confidence = 0.25))
summary(basket_rules)
#Top support and confidence values
#It seems like bananas (regular or organic) are bought with many transactions
top_support <- sort(basket_rules, decreasing = TRUE, na.last = NA, by = "support")
inspect(basket_rules[1:5])
#Top support and confidence values
#It seems like bananas (regular or organic) are bought with many transactions
top_support <- sort(basket_rules, decreasing = TRUE, na.last = NA, by = "support")
inspect(head(top_support, 10))
#Establish association rules with the Apriori Algorithm
basket_rules <- apriori(baskets, parameter = list(support = 0.005, confidence = 0.30))
summary(basket_rules)
inspect(basket_rules[1:5])
#Top support and confidence values
#It seems like bananas (regular or organic) are bought with many transactions
top_support <- sort(basket_rules, decreasing = TRUE, na.last = NA, by = "support")
inspect(head(top_support, 10))
top_confidence <- sort(basket_rules, decreasing = TRUE, na.last = NA, by = "confidence")
inspect(head(top_confidence, 10))
#Establish association rules with the Apriori Algorithm
basket_rules <- apriori(baskets, parameter = list(support = 0.005, confidence = 0.40))
summary(basket_rules)
inspect(basket_rules[1:5])
#Establish association rules with the Apriori Algorithm
basket_rules <- apriori(baskets, parameter = list(support = 0.005, confidence = 0.40))
summary(basket_rules)
inspect(basket_rules[1:5])
#Top support and confidence values
#It seems like bananas (regular or organic) are bought with many transactions
top_support <- sort(basket_rules, decreasing = TRUE, na.last = NA, by = "support")
inspect(head(top_support, 10))
top_confidence <- sort(basket_rules, decreasing = TRUE, na.last = NA, by = "confidence")
#Establish association rules with the Apriori Algorithm
#Through experimentation a confidence of more than 0.40 resulted in 1 or less rules
basket_rules <- apriori(baskets, parameter = list(support = 0.005, confidence = 0.30))
summary(basket_rules)
inspect(basket_rules[1:5])
#Top support and confidence values
#It seems like bananas (regular or organic) are bought with many transactions
top_support <- sort(basket_rules, decreasing = TRUE, na.last = NA, by = "support")
inspect(head(top_support, 10))
top_confidence <- sort(basket_rules, decreasing = TRUE, na.last = NA, by = "confidence")
inspect(head(top_confidence, 10))
plot(basket_rules)
install.packages("arulesviz")
library(arulesviz)
install.packages("arulesviz")
install.packages("arulesViz")
library(arulesViz)
plot(basket_rules)
#Establish association rules with the Apriori Algorithm
#Through experimentation a confidence of more than 0.40 resulted in 1 or less rules
basket_rules <- apriori(baskets, parameter = list(support = 0.005, confidence = 0.25))
plot(basket_rules)
#Establish association rules with the Apriori Algorithm
#Through experimentation a confidence of more than 0.40 resulted in 1 or less rules
basket_rules <- apriori(baskets, parameter = list(support = 0.005, confidence = 0.10))
plot(basket_rules)
#Establish association rules with the Apriori Algorithm
#Through experimentation a confidence of more than 0.40 resulted in 1 or less rules
basket_rules <- apriori(baskets, parameter = list(support = 0.005, confidence = 0.15))
plot(basket_rules)
#Establish association rules with the Apriori Algorithm
#Through experimentation a confidence of more than 0.40 resulted in 1 or less rules
basket_rules <- apriori(baskets, parameter = list(support = 0.005, confidence = 0.30))
plot(basket_rules)
plotly_arules(basket_rules)
inspectDT(basket_rules)
